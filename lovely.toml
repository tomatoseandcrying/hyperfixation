[manifest]
version = "1.0.0"
priority = 0


[[patches]] # Ijiraq Patch 1 (patches properly) WORKS
[patches.pattern]
target = "card.lua"
pattern = "self.seal = cardTable.seal"
position = "after"
match_indent = true
payload = '''
self.isIjiraq  = cardTable.isIjiraq
self.visiblyIjiraq = cardTable.visiblyIjiraq
'''
times = 1

[[patches]] # Ijiraq Patch 2 (patches properly) WORKS
[patches.pattern]
target = "card.lua"
pattern = "seal = self.seal,"
position = "after"
match_indent = true
payload = '''
isIjiraq = self.isIjiraq,
visiblyIjiraq = self.visiblyIjiraq,
'''
times = 1

[[patches]] # Ijiraq Patch 3 (patches properly) WORKS
[patches.pattern]
times = 1
match_indent = true
target = "functions/common_events.lua"
pattern = "local jokers, triggered = card:calculate_joker(context)"
position = "at"
payload = '''
local jokers, triggered
if G.GAME.raqeffects and next(G.GAME.raqeffects) and card.config.center.key == 'j_hpfx_ijiraq' then
    local old_ability, old_center, old_center_key, extra_jokers_list, jokers_table = copy_table(card.ability), card.config.center, card.config.center_key, copy_table(G.GAME.raqeffects), {}
    table.sort(extra_jokers_list, function(a, b) return (G.P_CENTERS[a].order or 0) < (G.P_CENTERS[b].order or 0) end)
    table.insert(extra_jokers_list, 1, card.config.center.key)
    for _, k in ipairs(extra_jokers_list) do
        Hyperglobal.safe_set_ability(card, G.P_CENTERS[k])
        local joker, trig = card:calculate_joker(context)
        triggered = triggered or trig
        if joker then
            table.insert(jokers_table, joker)
        end
    end
    card.ability, card.config.center, card.config.center_key, jokers = old_ability, old_center, old_center_key, SMODS.merge_effects(jokers_table)
else
    jokers, triggered = card:calculate_joker(context)
end
'''


# Mary unlock check
[[patches]]
[patches.pattern]
match_indent = true
times = 1
target = "functions/state_events.lua"
pattern = "check_for_unlock({type = 'chip_score', chips = math.floor(hand_chips*mult)})"
position = "after"
payload = '''
check_for_unlock({type = 'hpfx_7mult', mult = math.floor(mult)})
'''

# Golden Joker? transformation
[[patches]]
[patches.pattern]
match_indent = true
times = 1
target = "functions/state_events.lua"
pattern = '''
if ret then
    i = i+1
    add_round_eval_row({dollars = ret, bonus = true, name='joker'..i, pitch = pitch, card = _card})
    pitch = pitch + 0.06
    dollars = dollars + ret
end
'''
position = "after"
payload = '''
if _card.config.center.key == "j_hpfx_pyramid" then
    hpfx_Transform(_card)
end
'''

# Galilimbo Patch
[[patches]]
[patches.pattern]
match_indent = true
times = 1
target = "card.lua"
pattern = "card.T.x = self.T.x"
position = "at"
payload = '''
if next(SMODS.find_card('j_hpfx_galilimbo')) then
    if pseudorandom('galilimbo') > 0.8 then
        card:remove()
        card = nil
        card = create_card("Planet", G.pack_cards, nil, nil, true, true, nil, 'glb')
    end
end
'''